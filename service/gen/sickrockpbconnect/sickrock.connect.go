// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sickrock.proto

package sickrockpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/jamesread/SickRock/gen/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SickRockName is the fully-qualified name of the SickRock service.
	SickRockName = "sickrock.SickRock"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SickRockInitProcedure is the fully-qualified name of the SickRock's Init RPC.
	SickRockInitProcedure = "/sickrock.SickRock/Init"
	// SickRockPingProcedure is the fully-qualified name of the SickRock's Ping RPC.
	SickRockPingProcedure = "/sickrock.SickRock/Ping"
	// SickRockLoginProcedure is the fully-qualified name of the SickRock's Login RPC.
	SickRockLoginProcedure = "/sickrock.SickRock/Login"
	// SickRockLogoutProcedure is the fully-qualified name of the SickRock's Logout RPC.
	SickRockLogoutProcedure = "/sickrock.SickRock/Logout"
	// SickRockValidateTokenProcedure is the fully-qualified name of the SickRock's ValidateToken RPC.
	SickRockValidateTokenProcedure = "/sickrock.SickRock/ValidateToken"
	// SickRockGetNavigationLinksProcedure is the fully-qualified name of the SickRock's
	// GetNavigationLinks RPC.
	SickRockGetNavigationLinksProcedure = "/sickrock.SickRock/GetNavigationLinks"
	// SickRockGetPagesProcedure is the fully-qualified name of the SickRock's GetPages RPC.
	SickRockGetPagesProcedure = "/sickrock.SickRock/GetPages"
	// SickRockListItemsProcedure is the fully-qualified name of the SickRock's ListItems RPC.
	SickRockListItemsProcedure = "/sickrock.SickRock/ListItems"
	// SickRockCreateItemProcedure is the fully-qualified name of the SickRock's CreateItem RPC.
	SickRockCreateItemProcedure = "/sickrock.SickRock/CreateItem"
	// SickRockGetItemProcedure is the fully-qualified name of the SickRock's GetItem RPC.
	SickRockGetItemProcedure = "/sickrock.SickRock/GetItem"
	// SickRockEditItemProcedure is the fully-qualified name of the SickRock's EditItem RPC.
	SickRockEditItemProcedure = "/sickrock.SickRock/EditItem"
	// SickRockDeleteItemProcedure is the fully-qualified name of the SickRock's DeleteItem RPC.
	SickRockDeleteItemProcedure = "/sickrock.SickRock/DeleteItem"
	// SickRockGetTableStructureProcedure is the fully-qualified name of the SickRock's
	// GetTableStructure RPC.
	SickRockGetTableStructureProcedure = "/sickrock.SickRock/GetTableStructure"
	// SickRockAddTableColumnProcedure is the fully-qualified name of the SickRock's AddTableColumn RPC.
	SickRockAddTableColumnProcedure = "/sickrock.SickRock/AddTableColumn"
	// SickRockCreateTableViewProcedure is the fully-qualified name of the SickRock's CreateTableView
	// RPC.
	SickRockCreateTableViewProcedure = "/sickrock.SickRock/CreateTableView"
	// SickRockUpdateTableViewProcedure is the fully-qualified name of the SickRock's UpdateTableView
	// RPC.
	SickRockUpdateTableViewProcedure = "/sickrock.SickRock/UpdateTableView"
	// SickRockGetTableViewsProcedure is the fully-qualified name of the SickRock's GetTableViews RPC.
	SickRockGetTableViewsProcedure = "/sickrock.SickRock/GetTableViews"
	// SickRockDeleteTableViewProcedure is the fully-qualified name of the SickRock's DeleteTableView
	// RPC.
	SickRockDeleteTableViewProcedure = "/sickrock.SickRock/DeleteTableView"
	// SickRockCreateForeignKeyProcedure is the fully-qualified name of the SickRock's CreateForeignKey
	// RPC.
	SickRockCreateForeignKeyProcedure = "/sickrock.SickRock/CreateForeignKey"
	// SickRockGetForeignKeysProcedure is the fully-qualified name of the SickRock's GetForeignKeys RPC.
	SickRockGetForeignKeysProcedure = "/sickrock.SickRock/GetForeignKeys"
	// SickRockDeleteForeignKeyProcedure is the fully-qualified name of the SickRock's DeleteForeignKey
	// RPC.
	SickRockDeleteForeignKeyProcedure = "/sickrock.SickRock/DeleteForeignKey"
	// SickRockChangeColumnTypeProcedure is the fully-qualified name of the SickRock's ChangeColumnType
	// RPC.
	SickRockChangeColumnTypeProcedure = "/sickrock.SickRock/ChangeColumnType"
	// SickRockDropColumnProcedure is the fully-qualified name of the SickRock's DropColumn RPC.
	SickRockDropColumnProcedure = "/sickrock.SickRock/DropColumn"
	// SickRockChangeColumnNameProcedure is the fully-qualified name of the SickRock's ChangeColumnName
	// RPC.
	SickRockChangeColumnNameProcedure = "/sickrock.SickRock/ChangeColumnName"
	// SickRockGetMostRecentlyViewedProcedure is the fully-qualified name of the SickRock's
	// GetMostRecentlyViewed RPC.
	SickRockGetMostRecentlyViewedProcedure = "/sickrock.SickRock/GetMostRecentlyViewed"
	// SickRockGetSystemInfoProcedure is the fully-qualified name of the SickRock's GetSystemInfo RPC.
	SickRockGetSystemInfoProcedure = "/sickrock.SickRock/GetSystemInfo"
)

// SickRockClient is a client for the sickrock.SickRock service.
type SickRockClient interface {
	Init(context.Context, *connect.Request[proto.InitRequest]) (*connect.Response[proto.InitResponse], error)
	Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error)
	// Authentication
	Login(context.Context, *connect.Request[proto.LoginRequest]) (*connect.Response[proto.LoginResponse], error)
	Logout(context.Context, *connect.Request[proto.LogoutRequest]) (*connect.Response[proto.LogoutResponse], error)
	ValidateToken(context.Context, *connect.Request[proto.ValidateTokenRequest]) (*connect.Response[proto.ValidateTokenResponse], error)
	// Navigation for the UI
	GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error)
	// Pages available in the application
	GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error)
	// Generic CRUD over items on a page
	ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error)
	CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error)
	EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error)
	DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error)
	// Get structure/fields for a given page/table
	GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Add a column to a table
	AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Table Views
	CreateTableView(context.Context, *connect.Request[proto.CreateTableViewRequest]) (*connect.Response[proto.CreateTableViewResponse], error)
	UpdateTableView(context.Context, *connect.Request[proto.UpdateTableViewRequest]) (*connect.Response[proto.UpdateTableViewResponse], error)
	GetTableViews(context.Context, *connect.Request[proto.GetTableViewsRequest]) (*connect.Response[proto.GetTableViewsResponse], error)
	DeleteTableView(context.Context, *connect.Request[proto.DeleteTableViewRequest]) (*connect.Response[proto.DeleteTableViewResponse], error)
	// Foreign Key Management
	CreateForeignKey(context.Context, *connect.Request[proto.CreateForeignKeyRequest]) (*connect.Response[proto.CreateForeignKeyResponse], error)
	GetForeignKeys(context.Context, *connect.Request[proto.GetForeignKeysRequest]) (*connect.Response[proto.GetForeignKeysResponse], error)
	DeleteForeignKey(context.Context, *connect.Request[proto.DeleteForeignKeyRequest]) (*connect.Response[proto.DeleteForeignKeyResponse], error)
	// Column Type Management
	ChangeColumnType(context.Context, *connect.Request[proto.ChangeColumnTypeRequest]) (*connect.Response[proto.ChangeColumnTypeResponse], error)
	DropColumn(context.Context, *connect.Request[proto.DropColumnRequest]) (*connect.Response[proto.DropColumnResponse], error)
	ChangeColumnName(context.Context, *connect.Request[proto.ChangeColumnNameRequest]) (*connect.Response[proto.ChangeColumnNameResponse], error)
	// Recently Viewed Items
	GetMostRecentlyViewed(context.Context, *connect.Request[proto.GetMostRecentlyViewedRequest]) (*connect.Response[proto.GetMostRecentlyViewedResponse], error)
	// System Info
	GetSystemInfo(context.Context, *connect.Request[proto.GetSystemInfoRequest]) (*connect.Response[proto.GetSystemInfoResponse], error)
}

// NewSickRockClient constructs a client for the sickrock.SickRock service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSickRockClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SickRockClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sickRockMethods := proto.File_sickrock_proto.Services().ByName("SickRock").Methods()
	return &sickRockClient{
		init: connect.NewClient[proto.InitRequest, proto.InitResponse](
			httpClient,
			baseURL+SickRockInitProcedure,
			connect.WithSchema(sickRockMethods.ByName("Init")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[proto.PingRequest, proto.PingResponse](
			httpClient,
			baseURL+SickRockPingProcedure,
			connect.WithSchema(sickRockMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[proto.LoginRequest, proto.LoginResponse](
			httpClient,
			baseURL+SickRockLoginProcedure,
			connect.WithSchema(sickRockMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[proto.LogoutRequest, proto.LogoutResponse](
			httpClient,
			baseURL+SickRockLogoutProcedure,
			connect.WithSchema(sickRockMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[proto.ValidateTokenRequest, proto.ValidateTokenResponse](
			httpClient,
			baseURL+SickRockValidateTokenProcedure,
			connect.WithSchema(sickRockMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
		getNavigationLinks: connect.NewClient[proto.GetNavigationLinksRequest, proto.GetNavigationLinksResponse](
			httpClient,
			baseURL+SickRockGetNavigationLinksProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetNavigationLinks")),
			connect.WithClientOptions(opts...),
		),
		getPages: connect.NewClient[proto.GetPagesRequest, proto.GetPagesResponse](
			httpClient,
			baseURL+SickRockGetPagesProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetPages")),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[proto.ListItemsRequest, proto.ListItemsResponse](
			httpClient,
			baseURL+SickRockListItemsProcedure,
			connect.WithSchema(sickRockMethods.ByName("ListItems")),
			connect.WithClientOptions(opts...),
		),
		createItem: connect.NewClient[proto.CreateItemRequest, proto.CreateItemResponse](
			httpClient,
			baseURL+SickRockCreateItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[proto.GetItemRequest, proto.GetItemResponse](
			httpClient,
			baseURL+SickRockGetItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
		editItem: connect.NewClient[proto.EditItemRequest, proto.EditItemResponse](
			httpClient,
			baseURL+SickRockEditItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("EditItem")),
			connect.WithClientOptions(opts...),
		),
		deleteItem: connect.NewClient[proto.DeleteItemRequest, proto.DeleteItemResponse](
			httpClient,
			baseURL+SickRockDeleteItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("DeleteItem")),
			connect.WithClientOptions(opts...),
		),
		getTableStructure: connect.NewClient[proto.GetTableStructureRequest, proto.GetTableStructureResponse](
			httpClient,
			baseURL+SickRockGetTableStructureProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetTableStructure")),
			connect.WithClientOptions(opts...),
		),
		addTableColumn: connect.NewClient[proto.AddTableColumnRequest, proto.GetTableStructureResponse](
			httpClient,
			baseURL+SickRockAddTableColumnProcedure,
			connect.WithSchema(sickRockMethods.ByName("AddTableColumn")),
			connect.WithClientOptions(opts...),
		),
		createTableView: connect.NewClient[proto.CreateTableViewRequest, proto.CreateTableViewResponse](
			httpClient,
			baseURL+SickRockCreateTableViewProcedure,
			connect.WithSchema(sickRockMethods.ByName("CreateTableView")),
			connect.WithClientOptions(opts...),
		),
		updateTableView: connect.NewClient[proto.UpdateTableViewRequest, proto.UpdateTableViewResponse](
			httpClient,
			baseURL+SickRockUpdateTableViewProcedure,
			connect.WithSchema(sickRockMethods.ByName("UpdateTableView")),
			connect.WithClientOptions(opts...),
		),
		getTableViews: connect.NewClient[proto.GetTableViewsRequest, proto.GetTableViewsResponse](
			httpClient,
			baseURL+SickRockGetTableViewsProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetTableViews")),
			connect.WithClientOptions(opts...),
		),
		deleteTableView: connect.NewClient[proto.DeleteTableViewRequest, proto.DeleteTableViewResponse](
			httpClient,
			baseURL+SickRockDeleteTableViewProcedure,
			connect.WithSchema(sickRockMethods.ByName("DeleteTableView")),
			connect.WithClientOptions(opts...),
		),
		createForeignKey: connect.NewClient[proto.CreateForeignKeyRequest, proto.CreateForeignKeyResponse](
			httpClient,
			baseURL+SickRockCreateForeignKeyProcedure,
			connect.WithSchema(sickRockMethods.ByName("CreateForeignKey")),
			connect.WithClientOptions(opts...),
		),
		getForeignKeys: connect.NewClient[proto.GetForeignKeysRequest, proto.GetForeignKeysResponse](
			httpClient,
			baseURL+SickRockGetForeignKeysProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetForeignKeys")),
			connect.WithClientOptions(opts...),
		),
		deleteForeignKey: connect.NewClient[proto.DeleteForeignKeyRequest, proto.DeleteForeignKeyResponse](
			httpClient,
			baseURL+SickRockDeleteForeignKeyProcedure,
			connect.WithSchema(sickRockMethods.ByName("DeleteForeignKey")),
			connect.WithClientOptions(opts...),
		),
		changeColumnType: connect.NewClient[proto.ChangeColumnTypeRequest, proto.ChangeColumnTypeResponse](
			httpClient,
			baseURL+SickRockChangeColumnTypeProcedure,
			connect.WithSchema(sickRockMethods.ByName("ChangeColumnType")),
			connect.WithClientOptions(opts...),
		),
		dropColumn: connect.NewClient[proto.DropColumnRequest, proto.DropColumnResponse](
			httpClient,
			baseURL+SickRockDropColumnProcedure,
			connect.WithSchema(sickRockMethods.ByName("DropColumn")),
			connect.WithClientOptions(opts...),
		),
		changeColumnName: connect.NewClient[proto.ChangeColumnNameRequest, proto.ChangeColumnNameResponse](
			httpClient,
			baseURL+SickRockChangeColumnNameProcedure,
			connect.WithSchema(sickRockMethods.ByName("ChangeColumnName")),
			connect.WithClientOptions(opts...),
		),
		getMostRecentlyViewed: connect.NewClient[proto.GetMostRecentlyViewedRequest, proto.GetMostRecentlyViewedResponse](
			httpClient,
			baseURL+SickRockGetMostRecentlyViewedProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetMostRecentlyViewed")),
			connect.WithClientOptions(opts...),
		),
		getSystemInfo: connect.NewClient[proto.GetSystemInfoRequest, proto.GetSystemInfoResponse](
			httpClient,
			baseURL+SickRockGetSystemInfoProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetSystemInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sickRockClient implements SickRockClient.
type sickRockClient struct {
	init                  *connect.Client[proto.InitRequest, proto.InitResponse]
	ping                  *connect.Client[proto.PingRequest, proto.PingResponse]
	login                 *connect.Client[proto.LoginRequest, proto.LoginResponse]
	logout                *connect.Client[proto.LogoutRequest, proto.LogoutResponse]
	validateToken         *connect.Client[proto.ValidateTokenRequest, proto.ValidateTokenResponse]
	getNavigationLinks    *connect.Client[proto.GetNavigationLinksRequest, proto.GetNavigationLinksResponse]
	getPages              *connect.Client[proto.GetPagesRequest, proto.GetPagesResponse]
	listItems             *connect.Client[proto.ListItemsRequest, proto.ListItemsResponse]
	createItem            *connect.Client[proto.CreateItemRequest, proto.CreateItemResponse]
	getItem               *connect.Client[proto.GetItemRequest, proto.GetItemResponse]
	editItem              *connect.Client[proto.EditItemRequest, proto.EditItemResponse]
	deleteItem            *connect.Client[proto.DeleteItemRequest, proto.DeleteItemResponse]
	getTableStructure     *connect.Client[proto.GetTableStructureRequest, proto.GetTableStructureResponse]
	addTableColumn        *connect.Client[proto.AddTableColumnRequest, proto.GetTableStructureResponse]
	createTableView       *connect.Client[proto.CreateTableViewRequest, proto.CreateTableViewResponse]
	updateTableView       *connect.Client[proto.UpdateTableViewRequest, proto.UpdateTableViewResponse]
	getTableViews         *connect.Client[proto.GetTableViewsRequest, proto.GetTableViewsResponse]
	deleteTableView       *connect.Client[proto.DeleteTableViewRequest, proto.DeleteTableViewResponse]
	createForeignKey      *connect.Client[proto.CreateForeignKeyRequest, proto.CreateForeignKeyResponse]
	getForeignKeys        *connect.Client[proto.GetForeignKeysRequest, proto.GetForeignKeysResponse]
	deleteForeignKey      *connect.Client[proto.DeleteForeignKeyRequest, proto.DeleteForeignKeyResponse]
	changeColumnType      *connect.Client[proto.ChangeColumnTypeRequest, proto.ChangeColumnTypeResponse]
	dropColumn            *connect.Client[proto.DropColumnRequest, proto.DropColumnResponse]
	changeColumnName      *connect.Client[proto.ChangeColumnNameRequest, proto.ChangeColumnNameResponse]
	getMostRecentlyViewed *connect.Client[proto.GetMostRecentlyViewedRequest, proto.GetMostRecentlyViewedResponse]
	getSystemInfo         *connect.Client[proto.GetSystemInfoRequest, proto.GetSystemInfoResponse]
}

// Init calls sickrock.SickRock.Init.
func (c *sickRockClient) Init(ctx context.Context, req *connect.Request[proto.InitRequest]) (*connect.Response[proto.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Ping calls sickrock.SickRock.Ping.
func (c *sickRockClient) Ping(ctx context.Context, req *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Login calls sickrock.SickRock.Login.
func (c *sickRockClient) Login(ctx context.Context, req *connect.Request[proto.LoginRequest]) (*connect.Response[proto.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls sickrock.SickRock.Logout.
func (c *sickRockClient) Logout(ctx context.Context, req *connect.Request[proto.LogoutRequest]) (*connect.Response[proto.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// ValidateToken calls sickrock.SickRock.ValidateToken.
func (c *sickRockClient) ValidateToken(ctx context.Context, req *connect.Request[proto.ValidateTokenRequest]) (*connect.Response[proto.ValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// GetNavigationLinks calls sickrock.SickRock.GetNavigationLinks.
func (c *sickRockClient) GetNavigationLinks(ctx context.Context, req *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error) {
	return c.getNavigationLinks.CallUnary(ctx, req)
}

// GetPages calls sickrock.SickRock.GetPages.
func (c *sickRockClient) GetPages(ctx context.Context, req *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error) {
	return c.getPages.CallUnary(ctx, req)
}

// ListItems calls sickrock.SickRock.ListItems.
func (c *sickRockClient) ListItems(ctx context.Context, req *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// CreateItem calls sickrock.SickRock.CreateItem.
func (c *sickRockClient) CreateItem(ctx context.Context, req *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls sickrock.SickRock.GetItem.
func (c *sickRockClient) GetItem(ctx context.Context, req *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// EditItem calls sickrock.SickRock.EditItem.
func (c *sickRockClient) EditItem(ctx context.Context, req *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error) {
	return c.editItem.CallUnary(ctx, req)
}

// DeleteItem calls sickrock.SickRock.DeleteItem.
func (c *sickRockClient) DeleteItem(ctx context.Context, req *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// GetTableStructure calls sickrock.SickRock.GetTableStructure.
func (c *sickRockClient) GetTableStructure(ctx context.Context, req *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return c.getTableStructure.CallUnary(ctx, req)
}

// AddTableColumn calls sickrock.SickRock.AddTableColumn.
func (c *sickRockClient) AddTableColumn(ctx context.Context, req *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return c.addTableColumn.CallUnary(ctx, req)
}

// CreateTableView calls sickrock.SickRock.CreateTableView.
func (c *sickRockClient) CreateTableView(ctx context.Context, req *connect.Request[proto.CreateTableViewRequest]) (*connect.Response[proto.CreateTableViewResponse], error) {
	return c.createTableView.CallUnary(ctx, req)
}

// UpdateTableView calls sickrock.SickRock.UpdateTableView.
func (c *sickRockClient) UpdateTableView(ctx context.Context, req *connect.Request[proto.UpdateTableViewRequest]) (*connect.Response[proto.UpdateTableViewResponse], error) {
	return c.updateTableView.CallUnary(ctx, req)
}

// GetTableViews calls sickrock.SickRock.GetTableViews.
func (c *sickRockClient) GetTableViews(ctx context.Context, req *connect.Request[proto.GetTableViewsRequest]) (*connect.Response[proto.GetTableViewsResponse], error) {
	return c.getTableViews.CallUnary(ctx, req)
}

// DeleteTableView calls sickrock.SickRock.DeleteTableView.
func (c *sickRockClient) DeleteTableView(ctx context.Context, req *connect.Request[proto.DeleteTableViewRequest]) (*connect.Response[proto.DeleteTableViewResponse], error) {
	return c.deleteTableView.CallUnary(ctx, req)
}

// CreateForeignKey calls sickrock.SickRock.CreateForeignKey.
func (c *sickRockClient) CreateForeignKey(ctx context.Context, req *connect.Request[proto.CreateForeignKeyRequest]) (*connect.Response[proto.CreateForeignKeyResponse], error) {
	return c.createForeignKey.CallUnary(ctx, req)
}

// GetForeignKeys calls sickrock.SickRock.GetForeignKeys.
func (c *sickRockClient) GetForeignKeys(ctx context.Context, req *connect.Request[proto.GetForeignKeysRequest]) (*connect.Response[proto.GetForeignKeysResponse], error) {
	return c.getForeignKeys.CallUnary(ctx, req)
}

// DeleteForeignKey calls sickrock.SickRock.DeleteForeignKey.
func (c *sickRockClient) DeleteForeignKey(ctx context.Context, req *connect.Request[proto.DeleteForeignKeyRequest]) (*connect.Response[proto.DeleteForeignKeyResponse], error) {
	return c.deleteForeignKey.CallUnary(ctx, req)
}

// ChangeColumnType calls sickrock.SickRock.ChangeColumnType.
func (c *sickRockClient) ChangeColumnType(ctx context.Context, req *connect.Request[proto.ChangeColumnTypeRequest]) (*connect.Response[proto.ChangeColumnTypeResponse], error) {
	return c.changeColumnType.CallUnary(ctx, req)
}

// DropColumn calls sickrock.SickRock.DropColumn.
func (c *sickRockClient) DropColumn(ctx context.Context, req *connect.Request[proto.DropColumnRequest]) (*connect.Response[proto.DropColumnResponse], error) {
	return c.dropColumn.CallUnary(ctx, req)
}

// ChangeColumnName calls sickrock.SickRock.ChangeColumnName.
func (c *sickRockClient) ChangeColumnName(ctx context.Context, req *connect.Request[proto.ChangeColumnNameRequest]) (*connect.Response[proto.ChangeColumnNameResponse], error) {
	return c.changeColumnName.CallUnary(ctx, req)
}

// GetMostRecentlyViewed calls sickrock.SickRock.GetMostRecentlyViewed.
func (c *sickRockClient) GetMostRecentlyViewed(ctx context.Context, req *connect.Request[proto.GetMostRecentlyViewedRequest]) (*connect.Response[proto.GetMostRecentlyViewedResponse], error) {
	return c.getMostRecentlyViewed.CallUnary(ctx, req)
}

// GetSystemInfo calls sickrock.SickRock.GetSystemInfo.
func (c *sickRockClient) GetSystemInfo(ctx context.Context, req *connect.Request[proto.GetSystemInfoRequest]) (*connect.Response[proto.GetSystemInfoResponse], error) {
	return c.getSystemInfo.CallUnary(ctx, req)
}

// SickRockHandler is an implementation of the sickrock.SickRock service.
type SickRockHandler interface {
	Init(context.Context, *connect.Request[proto.InitRequest]) (*connect.Response[proto.InitResponse], error)
	Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error)
	// Authentication
	Login(context.Context, *connect.Request[proto.LoginRequest]) (*connect.Response[proto.LoginResponse], error)
	Logout(context.Context, *connect.Request[proto.LogoutRequest]) (*connect.Response[proto.LogoutResponse], error)
	ValidateToken(context.Context, *connect.Request[proto.ValidateTokenRequest]) (*connect.Response[proto.ValidateTokenResponse], error)
	// Navigation for the UI
	GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error)
	// Pages available in the application
	GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error)
	// Generic CRUD over items on a page
	ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error)
	CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error)
	EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error)
	DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error)
	// Get structure/fields for a given page/table
	GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Add a column to a table
	AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Table Views
	CreateTableView(context.Context, *connect.Request[proto.CreateTableViewRequest]) (*connect.Response[proto.CreateTableViewResponse], error)
	UpdateTableView(context.Context, *connect.Request[proto.UpdateTableViewRequest]) (*connect.Response[proto.UpdateTableViewResponse], error)
	GetTableViews(context.Context, *connect.Request[proto.GetTableViewsRequest]) (*connect.Response[proto.GetTableViewsResponse], error)
	DeleteTableView(context.Context, *connect.Request[proto.DeleteTableViewRequest]) (*connect.Response[proto.DeleteTableViewResponse], error)
	// Foreign Key Management
	CreateForeignKey(context.Context, *connect.Request[proto.CreateForeignKeyRequest]) (*connect.Response[proto.CreateForeignKeyResponse], error)
	GetForeignKeys(context.Context, *connect.Request[proto.GetForeignKeysRequest]) (*connect.Response[proto.GetForeignKeysResponse], error)
	DeleteForeignKey(context.Context, *connect.Request[proto.DeleteForeignKeyRequest]) (*connect.Response[proto.DeleteForeignKeyResponse], error)
	// Column Type Management
	ChangeColumnType(context.Context, *connect.Request[proto.ChangeColumnTypeRequest]) (*connect.Response[proto.ChangeColumnTypeResponse], error)
	DropColumn(context.Context, *connect.Request[proto.DropColumnRequest]) (*connect.Response[proto.DropColumnResponse], error)
	ChangeColumnName(context.Context, *connect.Request[proto.ChangeColumnNameRequest]) (*connect.Response[proto.ChangeColumnNameResponse], error)
	// Recently Viewed Items
	GetMostRecentlyViewed(context.Context, *connect.Request[proto.GetMostRecentlyViewedRequest]) (*connect.Response[proto.GetMostRecentlyViewedResponse], error)
	// System Info
	GetSystemInfo(context.Context, *connect.Request[proto.GetSystemInfoRequest]) (*connect.Response[proto.GetSystemInfoResponse], error)
}

// NewSickRockHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSickRockHandler(svc SickRockHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sickRockMethods := proto.File_sickrock_proto.Services().ByName("SickRock").Methods()
	sickRockInitHandler := connect.NewUnaryHandler(
		SickRockInitProcedure,
		svc.Init,
		connect.WithSchema(sickRockMethods.ByName("Init")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockPingHandler := connect.NewUnaryHandler(
		SickRockPingProcedure,
		svc.Ping,
		connect.WithSchema(sickRockMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockLoginHandler := connect.NewUnaryHandler(
		SickRockLoginProcedure,
		svc.Login,
		connect.WithSchema(sickRockMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockLogoutHandler := connect.NewUnaryHandler(
		SickRockLogoutProcedure,
		svc.Logout,
		connect.WithSchema(sickRockMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockValidateTokenHandler := connect.NewUnaryHandler(
		SickRockValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(sickRockMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetNavigationLinksHandler := connect.NewUnaryHandler(
		SickRockGetNavigationLinksProcedure,
		svc.GetNavigationLinks,
		connect.WithSchema(sickRockMethods.ByName("GetNavigationLinks")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetPagesHandler := connect.NewUnaryHandler(
		SickRockGetPagesProcedure,
		svc.GetPages,
		connect.WithSchema(sickRockMethods.ByName("GetPages")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockListItemsHandler := connect.NewUnaryHandler(
		SickRockListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(sickRockMethods.ByName("ListItems")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockCreateItemHandler := connect.NewUnaryHandler(
		SickRockCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(sickRockMethods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetItemHandler := connect.NewUnaryHandler(
		SickRockGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(sickRockMethods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockEditItemHandler := connect.NewUnaryHandler(
		SickRockEditItemProcedure,
		svc.EditItem,
		connect.WithSchema(sickRockMethods.ByName("EditItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockDeleteItemHandler := connect.NewUnaryHandler(
		SickRockDeleteItemProcedure,
		svc.DeleteItem,
		connect.WithSchema(sickRockMethods.ByName("DeleteItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetTableStructureHandler := connect.NewUnaryHandler(
		SickRockGetTableStructureProcedure,
		svc.GetTableStructure,
		connect.WithSchema(sickRockMethods.ByName("GetTableStructure")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockAddTableColumnHandler := connect.NewUnaryHandler(
		SickRockAddTableColumnProcedure,
		svc.AddTableColumn,
		connect.WithSchema(sickRockMethods.ByName("AddTableColumn")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockCreateTableViewHandler := connect.NewUnaryHandler(
		SickRockCreateTableViewProcedure,
		svc.CreateTableView,
		connect.WithSchema(sickRockMethods.ByName("CreateTableView")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockUpdateTableViewHandler := connect.NewUnaryHandler(
		SickRockUpdateTableViewProcedure,
		svc.UpdateTableView,
		connect.WithSchema(sickRockMethods.ByName("UpdateTableView")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetTableViewsHandler := connect.NewUnaryHandler(
		SickRockGetTableViewsProcedure,
		svc.GetTableViews,
		connect.WithSchema(sickRockMethods.ByName("GetTableViews")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockDeleteTableViewHandler := connect.NewUnaryHandler(
		SickRockDeleteTableViewProcedure,
		svc.DeleteTableView,
		connect.WithSchema(sickRockMethods.ByName("DeleteTableView")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockCreateForeignKeyHandler := connect.NewUnaryHandler(
		SickRockCreateForeignKeyProcedure,
		svc.CreateForeignKey,
		connect.WithSchema(sickRockMethods.ByName("CreateForeignKey")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetForeignKeysHandler := connect.NewUnaryHandler(
		SickRockGetForeignKeysProcedure,
		svc.GetForeignKeys,
		connect.WithSchema(sickRockMethods.ByName("GetForeignKeys")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockDeleteForeignKeyHandler := connect.NewUnaryHandler(
		SickRockDeleteForeignKeyProcedure,
		svc.DeleteForeignKey,
		connect.WithSchema(sickRockMethods.ByName("DeleteForeignKey")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockChangeColumnTypeHandler := connect.NewUnaryHandler(
		SickRockChangeColumnTypeProcedure,
		svc.ChangeColumnType,
		connect.WithSchema(sickRockMethods.ByName("ChangeColumnType")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockDropColumnHandler := connect.NewUnaryHandler(
		SickRockDropColumnProcedure,
		svc.DropColumn,
		connect.WithSchema(sickRockMethods.ByName("DropColumn")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockChangeColumnNameHandler := connect.NewUnaryHandler(
		SickRockChangeColumnNameProcedure,
		svc.ChangeColumnName,
		connect.WithSchema(sickRockMethods.ByName("ChangeColumnName")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetMostRecentlyViewedHandler := connect.NewUnaryHandler(
		SickRockGetMostRecentlyViewedProcedure,
		svc.GetMostRecentlyViewed,
		connect.WithSchema(sickRockMethods.ByName("GetMostRecentlyViewed")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetSystemInfoHandler := connect.NewUnaryHandler(
		SickRockGetSystemInfoProcedure,
		svc.GetSystemInfo,
		connect.WithSchema(sickRockMethods.ByName("GetSystemInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sickrock.SickRock/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SickRockInitProcedure:
			sickRockInitHandler.ServeHTTP(w, r)
		case SickRockPingProcedure:
			sickRockPingHandler.ServeHTTP(w, r)
		case SickRockLoginProcedure:
			sickRockLoginHandler.ServeHTTP(w, r)
		case SickRockLogoutProcedure:
			sickRockLogoutHandler.ServeHTTP(w, r)
		case SickRockValidateTokenProcedure:
			sickRockValidateTokenHandler.ServeHTTP(w, r)
		case SickRockGetNavigationLinksProcedure:
			sickRockGetNavigationLinksHandler.ServeHTTP(w, r)
		case SickRockGetPagesProcedure:
			sickRockGetPagesHandler.ServeHTTP(w, r)
		case SickRockListItemsProcedure:
			sickRockListItemsHandler.ServeHTTP(w, r)
		case SickRockCreateItemProcedure:
			sickRockCreateItemHandler.ServeHTTP(w, r)
		case SickRockGetItemProcedure:
			sickRockGetItemHandler.ServeHTTP(w, r)
		case SickRockEditItemProcedure:
			sickRockEditItemHandler.ServeHTTP(w, r)
		case SickRockDeleteItemProcedure:
			sickRockDeleteItemHandler.ServeHTTP(w, r)
		case SickRockGetTableStructureProcedure:
			sickRockGetTableStructureHandler.ServeHTTP(w, r)
		case SickRockAddTableColumnProcedure:
			sickRockAddTableColumnHandler.ServeHTTP(w, r)
		case SickRockCreateTableViewProcedure:
			sickRockCreateTableViewHandler.ServeHTTP(w, r)
		case SickRockUpdateTableViewProcedure:
			sickRockUpdateTableViewHandler.ServeHTTP(w, r)
		case SickRockGetTableViewsProcedure:
			sickRockGetTableViewsHandler.ServeHTTP(w, r)
		case SickRockDeleteTableViewProcedure:
			sickRockDeleteTableViewHandler.ServeHTTP(w, r)
		case SickRockCreateForeignKeyProcedure:
			sickRockCreateForeignKeyHandler.ServeHTTP(w, r)
		case SickRockGetForeignKeysProcedure:
			sickRockGetForeignKeysHandler.ServeHTTP(w, r)
		case SickRockDeleteForeignKeyProcedure:
			sickRockDeleteForeignKeyHandler.ServeHTTP(w, r)
		case SickRockChangeColumnTypeProcedure:
			sickRockChangeColumnTypeHandler.ServeHTTP(w, r)
		case SickRockDropColumnProcedure:
			sickRockDropColumnHandler.ServeHTTP(w, r)
		case SickRockChangeColumnNameProcedure:
			sickRockChangeColumnNameHandler.ServeHTTP(w, r)
		case SickRockGetMostRecentlyViewedProcedure:
			sickRockGetMostRecentlyViewedHandler.ServeHTTP(w, r)
		case SickRockGetSystemInfoProcedure:
			sickRockGetSystemInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSickRockHandler returns CodeUnimplemented from all methods.
type UnimplementedSickRockHandler struct{}

func (UnimplementedSickRockHandler) Init(context.Context, *connect.Request[proto.InitRequest]) (*connect.Response[proto.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.Init is not implemented"))
}

func (UnimplementedSickRockHandler) Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.Ping is not implemented"))
}

func (UnimplementedSickRockHandler) Login(context.Context, *connect.Request[proto.LoginRequest]) (*connect.Response[proto.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.Login is not implemented"))
}

func (UnimplementedSickRockHandler) Logout(context.Context, *connect.Request[proto.LogoutRequest]) (*connect.Response[proto.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.Logout is not implemented"))
}

func (UnimplementedSickRockHandler) ValidateToken(context.Context, *connect.Request[proto.ValidateTokenRequest]) (*connect.Response[proto.ValidateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.ValidateToken is not implemented"))
}

func (UnimplementedSickRockHandler) GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetNavigationLinks is not implemented"))
}

func (UnimplementedSickRockHandler) GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetPages is not implemented"))
}

func (UnimplementedSickRockHandler) ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.ListItems is not implemented"))
}

func (UnimplementedSickRockHandler) CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.CreateItem is not implemented"))
}

func (UnimplementedSickRockHandler) GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetItem is not implemented"))
}

func (UnimplementedSickRockHandler) EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.EditItem is not implemented"))
}

func (UnimplementedSickRockHandler) DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.DeleteItem is not implemented"))
}

func (UnimplementedSickRockHandler) GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetTableStructure is not implemented"))
}

func (UnimplementedSickRockHandler) AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.AddTableColumn is not implemented"))
}

func (UnimplementedSickRockHandler) CreateTableView(context.Context, *connect.Request[proto.CreateTableViewRequest]) (*connect.Response[proto.CreateTableViewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.CreateTableView is not implemented"))
}

func (UnimplementedSickRockHandler) UpdateTableView(context.Context, *connect.Request[proto.UpdateTableViewRequest]) (*connect.Response[proto.UpdateTableViewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.UpdateTableView is not implemented"))
}

func (UnimplementedSickRockHandler) GetTableViews(context.Context, *connect.Request[proto.GetTableViewsRequest]) (*connect.Response[proto.GetTableViewsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetTableViews is not implemented"))
}

func (UnimplementedSickRockHandler) DeleteTableView(context.Context, *connect.Request[proto.DeleteTableViewRequest]) (*connect.Response[proto.DeleteTableViewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.DeleteTableView is not implemented"))
}

func (UnimplementedSickRockHandler) CreateForeignKey(context.Context, *connect.Request[proto.CreateForeignKeyRequest]) (*connect.Response[proto.CreateForeignKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.CreateForeignKey is not implemented"))
}

func (UnimplementedSickRockHandler) GetForeignKeys(context.Context, *connect.Request[proto.GetForeignKeysRequest]) (*connect.Response[proto.GetForeignKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetForeignKeys is not implemented"))
}

func (UnimplementedSickRockHandler) DeleteForeignKey(context.Context, *connect.Request[proto.DeleteForeignKeyRequest]) (*connect.Response[proto.DeleteForeignKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.DeleteForeignKey is not implemented"))
}

func (UnimplementedSickRockHandler) ChangeColumnType(context.Context, *connect.Request[proto.ChangeColumnTypeRequest]) (*connect.Response[proto.ChangeColumnTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.ChangeColumnType is not implemented"))
}

func (UnimplementedSickRockHandler) DropColumn(context.Context, *connect.Request[proto.DropColumnRequest]) (*connect.Response[proto.DropColumnResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.DropColumn is not implemented"))
}

func (UnimplementedSickRockHandler) ChangeColumnName(context.Context, *connect.Request[proto.ChangeColumnNameRequest]) (*connect.Response[proto.ChangeColumnNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.ChangeColumnName is not implemented"))
}

func (UnimplementedSickRockHandler) GetMostRecentlyViewed(context.Context, *connect.Request[proto.GetMostRecentlyViewedRequest]) (*connect.Response[proto.GetMostRecentlyViewedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetMostRecentlyViewed is not implemented"))
}

func (UnimplementedSickRockHandler) GetSystemInfo(context.Context, *connect.Request[proto.GetSystemInfoRequest]) (*connect.Response[proto.GetSystemInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetSystemInfo is not implemented"))
}
