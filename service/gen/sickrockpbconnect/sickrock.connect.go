// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sickrock.proto

package sickrockpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/jamesread/SickRock/gen/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SickRockName is the fully-qualified name of the SickRock service.
	SickRockName = "sickrock.SickRock"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SickRockPingProcedure is the fully-qualified name of the SickRock's Ping RPC.
	SickRockPingProcedure = "/sickrock.SickRock/Ping"
	// SickRockGetNavigationLinksProcedure is the fully-qualified name of the SickRock's
	// GetNavigationLinks RPC.
	SickRockGetNavigationLinksProcedure = "/sickrock.SickRock/GetNavigationLinks"
	// SickRockGetPagesProcedure is the fully-qualified name of the SickRock's GetPages RPC.
	SickRockGetPagesProcedure = "/sickrock.SickRock/GetPages"
	// SickRockListItemsProcedure is the fully-qualified name of the SickRock's ListItems RPC.
	SickRockListItemsProcedure = "/sickrock.SickRock/ListItems"
	// SickRockCreateItemProcedure is the fully-qualified name of the SickRock's CreateItem RPC.
	SickRockCreateItemProcedure = "/sickrock.SickRock/CreateItem"
	// SickRockGetItemProcedure is the fully-qualified name of the SickRock's GetItem RPC.
	SickRockGetItemProcedure = "/sickrock.SickRock/GetItem"
	// SickRockEditItemProcedure is the fully-qualified name of the SickRock's EditItem RPC.
	SickRockEditItemProcedure = "/sickrock.SickRock/EditItem"
	// SickRockDeleteItemProcedure is the fully-qualified name of the SickRock's DeleteItem RPC.
	SickRockDeleteItemProcedure = "/sickrock.SickRock/DeleteItem"
	// SickRockGetTableStructureProcedure is the fully-qualified name of the SickRock's
	// GetTableStructure RPC.
	SickRockGetTableStructureProcedure = "/sickrock.SickRock/GetTableStructure"
	// SickRockAddTableColumnProcedure is the fully-qualified name of the SickRock's AddTableColumn RPC.
	SickRockAddTableColumnProcedure = "/sickrock.SickRock/AddTableColumn"
)

// SickRockClient is a client for the sickrock.SickRock service.
type SickRockClient interface {
	Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error)
	// Navigation for the UI
	GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error)
	// Pages available in the application
	GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error)
	// Generic CRUD over items on a page
	ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error)
	CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error)
	EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error)
	DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error)
	// Get structure/fields for a given page/table
	GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Add a column to a table
	AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
}

// NewSickRockClient constructs a client for the sickrock.SickRock service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSickRockClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SickRockClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sickRockMethods := proto.File_sickrock_proto.Services().ByName("SickRock").Methods()
	return &sickRockClient{
		ping: connect.NewClient[proto.PingRequest, proto.PingResponse](
			httpClient,
			baseURL+SickRockPingProcedure,
			connect.WithSchema(sickRockMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getNavigationLinks: connect.NewClient[proto.GetNavigationLinksRequest, proto.GetNavigationLinksResponse](
			httpClient,
			baseURL+SickRockGetNavigationLinksProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetNavigationLinks")),
			connect.WithClientOptions(opts...),
		),
		getPages: connect.NewClient[proto.GetPagesRequest, proto.GetPagesResponse](
			httpClient,
			baseURL+SickRockGetPagesProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetPages")),
			connect.WithClientOptions(opts...),
		),
		listItems: connect.NewClient[proto.ListItemsRequest, proto.ListItemsResponse](
			httpClient,
			baseURL+SickRockListItemsProcedure,
			connect.WithSchema(sickRockMethods.ByName("ListItems")),
			connect.WithClientOptions(opts...),
		),
		createItem: connect.NewClient[proto.CreateItemRequest, proto.CreateItemResponse](
			httpClient,
			baseURL+SickRockCreateItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[proto.GetItemRequest, proto.GetItemResponse](
			httpClient,
			baseURL+SickRockGetItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
		editItem: connect.NewClient[proto.EditItemRequest, proto.EditItemResponse](
			httpClient,
			baseURL+SickRockEditItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("EditItem")),
			connect.WithClientOptions(opts...),
		),
		deleteItem: connect.NewClient[proto.DeleteItemRequest, proto.DeleteItemResponse](
			httpClient,
			baseURL+SickRockDeleteItemProcedure,
			connect.WithSchema(sickRockMethods.ByName("DeleteItem")),
			connect.WithClientOptions(opts...),
		),
		getTableStructure: connect.NewClient[proto.GetTableStructureRequest, proto.GetTableStructureResponse](
			httpClient,
			baseURL+SickRockGetTableStructureProcedure,
			connect.WithSchema(sickRockMethods.ByName("GetTableStructure")),
			connect.WithClientOptions(opts...),
		),
		addTableColumn: connect.NewClient[proto.AddTableColumnRequest, proto.GetTableStructureResponse](
			httpClient,
			baseURL+SickRockAddTableColumnProcedure,
			connect.WithSchema(sickRockMethods.ByName("AddTableColumn")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sickRockClient implements SickRockClient.
type sickRockClient struct {
	ping               *connect.Client[proto.PingRequest, proto.PingResponse]
	getNavigationLinks *connect.Client[proto.GetNavigationLinksRequest, proto.GetNavigationLinksResponse]
	getPages           *connect.Client[proto.GetPagesRequest, proto.GetPagesResponse]
	listItems          *connect.Client[proto.ListItemsRequest, proto.ListItemsResponse]
	createItem         *connect.Client[proto.CreateItemRequest, proto.CreateItemResponse]
	getItem            *connect.Client[proto.GetItemRequest, proto.GetItemResponse]
	editItem           *connect.Client[proto.EditItemRequest, proto.EditItemResponse]
	deleteItem         *connect.Client[proto.DeleteItemRequest, proto.DeleteItemResponse]
	getTableStructure  *connect.Client[proto.GetTableStructureRequest, proto.GetTableStructureResponse]
	addTableColumn     *connect.Client[proto.AddTableColumnRequest, proto.GetTableStructureResponse]
}

// Ping calls sickrock.SickRock.Ping.
func (c *sickRockClient) Ping(ctx context.Context, req *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetNavigationLinks calls sickrock.SickRock.GetNavigationLinks.
func (c *sickRockClient) GetNavigationLinks(ctx context.Context, req *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error) {
	return c.getNavigationLinks.CallUnary(ctx, req)
}

// GetPages calls sickrock.SickRock.GetPages.
func (c *sickRockClient) GetPages(ctx context.Context, req *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error) {
	return c.getPages.CallUnary(ctx, req)
}

// ListItems calls sickrock.SickRock.ListItems.
func (c *sickRockClient) ListItems(ctx context.Context, req *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// CreateItem calls sickrock.SickRock.CreateItem.
func (c *sickRockClient) CreateItem(ctx context.Context, req *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls sickrock.SickRock.GetItem.
func (c *sickRockClient) GetItem(ctx context.Context, req *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// EditItem calls sickrock.SickRock.EditItem.
func (c *sickRockClient) EditItem(ctx context.Context, req *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error) {
	return c.editItem.CallUnary(ctx, req)
}

// DeleteItem calls sickrock.SickRock.DeleteItem.
func (c *sickRockClient) DeleteItem(ctx context.Context, req *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// GetTableStructure calls sickrock.SickRock.GetTableStructure.
func (c *sickRockClient) GetTableStructure(ctx context.Context, req *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return c.getTableStructure.CallUnary(ctx, req)
}

// AddTableColumn calls sickrock.SickRock.AddTableColumn.
func (c *sickRockClient) AddTableColumn(ctx context.Context, req *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return c.addTableColumn.CallUnary(ctx, req)
}

// SickRockHandler is an implementation of the sickrock.SickRock service.
type SickRockHandler interface {
	Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error)
	// Navigation for the UI
	GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error)
	// Pages available in the application
	GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error)
	// Generic CRUD over items on a page
	ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error)
	CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error)
	GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error)
	EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error)
	DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error)
	// Get structure/fields for a given page/table
	GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
	// Add a column to a table
	AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error)
}

// NewSickRockHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSickRockHandler(svc SickRockHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sickRockMethods := proto.File_sickrock_proto.Services().ByName("SickRock").Methods()
	sickRockPingHandler := connect.NewUnaryHandler(
		SickRockPingProcedure,
		svc.Ping,
		connect.WithSchema(sickRockMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetNavigationLinksHandler := connect.NewUnaryHandler(
		SickRockGetNavigationLinksProcedure,
		svc.GetNavigationLinks,
		connect.WithSchema(sickRockMethods.ByName("GetNavigationLinks")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetPagesHandler := connect.NewUnaryHandler(
		SickRockGetPagesProcedure,
		svc.GetPages,
		connect.WithSchema(sickRockMethods.ByName("GetPages")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockListItemsHandler := connect.NewUnaryHandler(
		SickRockListItemsProcedure,
		svc.ListItems,
		connect.WithSchema(sickRockMethods.ByName("ListItems")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockCreateItemHandler := connect.NewUnaryHandler(
		SickRockCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(sickRockMethods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetItemHandler := connect.NewUnaryHandler(
		SickRockGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(sickRockMethods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockEditItemHandler := connect.NewUnaryHandler(
		SickRockEditItemProcedure,
		svc.EditItem,
		connect.WithSchema(sickRockMethods.ByName("EditItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockDeleteItemHandler := connect.NewUnaryHandler(
		SickRockDeleteItemProcedure,
		svc.DeleteItem,
		connect.WithSchema(sickRockMethods.ByName("DeleteItem")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockGetTableStructureHandler := connect.NewUnaryHandler(
		SickRockGetTableStructureProcedure,
		svc.GetTableStructure,
		connect.WithSchema(sickRockMethods.ByName("GetTableStructure")),
		connect.WithHandlerOptions(opts...),
	)
	sickRockAddTableColumnHandler := connect.NewUnaryHandler(
		SickRockAddTableColumnProcedure,
		svc.AddTableColumn,
		connect.WithSchema(sickRockMethods.ByName("AddTableColumn")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sickrock.SickRock/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SickRockPingProcedure:
			sickRockPingHandler.ServeHTTP(w, r)
		case SickRockGetNavigationLinksProcedure:
			sickRockGetNavigationLinksHandler.ServeHTTP(w, r)
		case SickRockGetPagesProcedure:
			sickRockGetPagesHandler.ServeHTTP(w, r)
		case SickRockListItemsProcedure:
			sickRockListItemsHandler.ServeHTTP(w, r)
		case SickRockCreateItemProcedure:
			sickRockCreateItemHandler.ServeHTTP(w, r)
		case SickRockGetItemProcedure:
			sickRockGetItemHandler.ServeHTTP(w, r)
		case SickRockEditItemProcedure:
			sickRockEditItemHandler.ServeHTTP(w, r)
		case SickRockDeleteItemProcedure:
			sickRockDeleteItemHandler.ServeHTTP(w, r)
		case SickRockGetTableStructureProcedure:
			sickRockGetTableStructureHandler.ServeHTTP(w, r)
		case SickRockAddTableColumnProcedure:
			sickRockAddTableColumnHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSickRockHandler returns CodeUnimplemented from all methods.
type UnimplementedSickRockHandler struct{}

func (UnimplementedSickRockHandler) Ping(context.Context, *connect.Request[proto.PingRequest]) (*connect.Response[proto.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.Ping is not implemented"))
}

func (UnimplementedSickRockHandler) GetNavigationLinks(context.Context, *connect.Request[proto.GetNavigationLinksRequest]) (*connect.Response[proto.GetNavigationLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetNavigationLinks is not implemented"))
}

func (UnimplementedSickRockHandler) GetPages(context.Context, *connect.Request[proto.GetPagesRequest]) (*connect.Response[proto.GetPagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetPages is not implemented"))
}

func (UnimplementedSickRockHandler) ListItems(context.Context, *connect.Request[proto.ListItemsRequest]) (*connect.Response[proto.ListItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.ListItems is not implemented"))
}

func (UnimplementedSickRockHandler) CreateItem(context.Context, *connect.Request[proto.CreateItemRequest]) (*connect.Response[proto.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.CreateItem is not implemented"))
}

func (UnimplementedSickRockHandler) GetItem(context.Context, *connect.Request[proto.GetItemRequest]) (*connect.Response[proto.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetItem is not implemented"))
}

func (UnimplementedSickRockHandler) EditItem(context.Context, *connect.Request[proto.EditItemRequest]) (*connect.Response[proto.EditItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.EditItem is not implemented"))
}

func (UnimplementedSickRockHandler) DeleteItem(context.Context, *connect.Request[proto.DeleteItemRequest]) (*connect.Response[proto.DeleteItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.DeleteItem is not implemented"))
}

func (UnimplementedSickRockHandler) GetTableStructure(context.Context, *connect.Request[proto.GetTableStructureRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.GetTableStructure is not implemented"))
}

func (UnimplementedSickRockHandler) AddTableColumn(context.Context, *connect.Request[proto.AddTableColumnRequest]) (*connect.Response[proto.GetTableStructureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sickrock.SickRock.AddTableColumn is not implemented"))
}
