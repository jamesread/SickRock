syntax = "proto3";

package sickrock;

option go_package = "github.com/jamesread/SickRock/gen/proto;sickrockpb";

message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
  int64 timestamp_unix = 2; // UTC seconds since epoch
}

// Navigation
message GetNavigationLinksRequest {}

message NavigationLink {
  string label = 1;
  string path = 2;
}

message GetNavigationLinksResponse {
  repeated NavigationLink links = 1;
}

// Table Configurations
message GetTableConfigurationsRequest {}

message Page {
  string id = 1;
  string title = 2;
  string slug = 3;
  int32 ordinal = 4;
  string icon = 5;
  string view = 6;
}

message GetTableConfigurationsResponse {
  repeated Page pages = 1;
}

// Navigation
message GetNavigationRequest {}

message NavigationItem {
  int32 id = 1;
  int32 ordinal = 2;
  int32 table_configuration = 3;
  string table_name = 4;
  string table_title = 5;
  string table_icon = 6;
  string table_view = 7;
  int32 dashboard_id = 8; // optional, 0 if not set
  string dashboard_name = 9; // optional
  string title = 10; // navigation field from table_navigation
}

message GetNavigationResponse {
  repeated NavigationItem items = 1;
  repeated UserBookmark bookmarks = 2;
}

// Items
message Item {
  string id = 1;
  int64 sr_created = 2;
  map<string, string> additional_fields = 3;
}

message ListItemsRequest {
  string tc_name = 1;
  // Exact-match filters: column -> value
  map<string, string> where = 2;
}

message ListItemsResponse {
  repeated Item items = 1;
}

message CreateItemRequest {
  string page_id = 1;
  int64 sr_created = 2; // Optional custom timestamp
  map<string, string> additional_fields = 3;
}

message CreateItemResponse {
  Item item = 1;
}

message GetItemRequest {
  string page_id = 1;
  string id = 2;
}

message GetItemResponse {
  Item item = 1;
}

message EditItemRequest {
  string id = 1;
  map<string, string> additional_fields = 2;
  string page_id = 3;
}

message EditItemResponse {
  Item item = 1;
}

message DeleteItemRequest {
  string page_id = 1;
  string id = 2;
}

message DeleteItemResponse {
  bool deleted = 1;
}

// Table Structure
message GetTableStructureRequest {
  string page_id = 1;
}

message Field {
  string name = 1;
  string type = 2;
  bool required = 3;
  bool default_to_current_timestamp = 4;
}

message GetTableStructureResponse {
  repeated Field fields = 1;
  string CreateButtonText = 2;
  string view = 3;
}

message AddTableColumnRequest {
  string page_id = 1;
  Field field = 2;
}

// Table Views
message TableViewColumn {
  string column_name = 1;
  bool is_visible = 2;
  int32 column_order = 3;
  string sort_order = 4; // "asc", "desc", or empty
}

message CreateTableViewRequest {
  string table_name = 1;
  string view_name = 2;
  repeated TableViewColumn columns = 3;
}

message CreateTableViewResponse {
  bool success = 1;
  string message = 2;
}

message UpdateTableViewRequest {
  int32 view_id = 1;
  string table_name = 2;
  string view_name = 3;
  repeated TableViewColumn columns = 4;
}

message UpdateTableViewResponse {
  bool success = 1;
  string message = 2;
}

message GetTableViewsRequest {
  string table_name = 1;
}

message TableView {
  int32 id = 1;
  string table_name = 2;
  string view_name = 3;
  bool is_default = 4;
  repeated TableViewColumn columns = 5;
}

message GetTableViewsResponse {
  repeated TableView views = 1;
}

message DeleteTableViewRequest {
  int32 view_id = 1;
}

message DeleteTableViewResponse {
  bool success = 1;
  string message = 2;
}

// Foreign Key Management
message ForeignKey {
  string constraint_name = 1;
  string table_name = 2;
  string column_name = 3;
  string referenced_table = 4;
  string referenced_column = 5;
  string on_delete_action = 6;
  string on_update_action = 7;
}

message CreateForeignKeyRequest {
  string table_name = 1;
  string column_name = 2;
  string referenced_table = 3;
  string referenced_column = 4;
  string on_delete_action = 5; // "CASCADE", "SET NULL", "RESTRICT", "NO ACTION"
  string on_update_action = 6; // "CASCADE", "SET NULL", "RESTRICT", "NO ACTION"
}

message CreateForeignKeyResponse {
  bool success = 1;
  string message = 2;
}

message GetForeignKeysRequest {
  string table_name = 1;
}

message GetForeignKeysResponse {
  repeated ForeignKey foreign_keys = 1;
}

message DeleteForeignKeyRequest {
  string constraint_name = 1;
}

message DeleteForeignKeyResponse {
  bool success = 1;
  string message = 2;
}

// Column Type Management
message ChangeColumnTypeRequest {
  string table_name = 1;
  string column_name = 2;
  string new_type = 3;
}

message ChangeColumnTypeResponse {
  bool success = 1;
  string message = 2;
}

// Drop Column Management
message DropColumnRequest {
  string table_name = 1;
  string column_name = 2;
}

message DropColumnResponse {
  bool success = 1;
  string message = 2;
}

// Rename Column Management
message ChangeColumnNameRequest {
  string table_name = 1;
  string old_column_name = 2;
  string new_column_name = 3;
}

message ChangeColumnNameResponse {
  bool success = 1;
  string message = 2;
}

// Recently Viewed Items
message GetMostRecentlyViewedRequest {
  int32 limit = 1; // Maximum number of items to return (default: 10)
}

message RecentlyViewedItem {
  string name = 1;           // Table name
  string table_id = 2;        // Item ID
  string icon = 3;           // Icon from table_configurations
  int64 updated_at_unix = 4; // When it was last viewed
  string item_name = 5;      // The actual name/title of the item
  string table_title = 6;    // Human title from table_configurations
}

message GetMostRecentlyViewedResponse {
  repeated RecentlyViewedItem items = 1;
}

// Dashboards
message Dashboard {
  int32 id = 1;
  string name = 2;
  repeated DashboardComponent components = 3;
}

message GetDashboardsRequest {}

message GetDashboardsResponse {
  repeated Dashboard dashboards = 1;
}

message DashboardComponent {
  int32 id = 1;
  string name = 2;
  string dataString = 3;
  float dataNumber = 4;
  string error = 5;
  string suffix = 6;
}

message DashboardComponentRule {
  int32 id = 1;
  int32 component = 2;
  int32 ordinal = 3;
  string operation = 4;
  string operand = 5;
}

message GetDashboardComponentRulesRequest {
  int32 component = 1; // filter by component id
}

message GetDashboardComponentRulesResponse {
  repeated DashboardComponentRule rules = 1;
}

message CreateDashboardComponentRuleRequest {
  int32 component = 1;
  int32 ordinal = 2;
  string operation = 3;
  string operand = 4;
}

message CreateDashboardComponentRuleResponse {
  DashboardComponentRule rule = 1;
}
// Build info
message InitRequest {}

message InitResponse {
  string version = 1;
  string commit = 2;
  string date = 3;
  string db_name = 4;
}

// Authentication
message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  string token = 3;
  int64 expires_at = 4; // Unix timestamp
}

message LogoutRequest {}

message LogoutResponse {
  bool success = 1;
  string message = 2;
}

message ResetUserPasswordRequest {
  string username = 1;
  string new_password = 2;
}

message ResetUserPasswordResponse {
  bool success = 1;
  string message = 2;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  string username = 2;
  int64 expires_at = 3;
  string initial_route = 4;
}

// Device Code Authentication
message GenerateDeviceCodeRequest {}

message GenerateDeviceCodeResponse {
  string code = 1;
  int64 expires_at = 2; // Unix timestamp
}

message ClaimDeviceCodeRequest {
  string code = 1;
}

message ClaimDeviceCodeResponse {
  bool success = 1;
  string message = 2;
  string token = 3;
  int64 expires_at = 4; // Unix timestamp
}

message CheckDeviceCodeRequest {
  string code = 1;
}

message CheckDeviceCodeResponse {
  bool valid = 1;
  bool claimed = 2;
  int64 expires_at = 3; // Unix timestamp
  string token = 4; // JWT token if claimed
  string username = 5; // Username if claimed
}

message GetDeviceCodeSessionRequest {
  string code = 1;
}

message GetDeviceCodeSessionResponse {
  bool success = 1;
  string message = 2;
  string token = 3;
  int64 expires_at = 4; // Unix timestamp
  string username = 5;
}

// System Info
message GetSystemInfoRequest {}
message GetSystemInfoResponse {
  int64 approx_total_rows = 1;
}

// User Bookmarks
message GetUserBookmarksRequest {}
message GetUserBookmarksResponse {
  repeated UserBookmark bookmarks = 1;
}

message CreateUserBookmarkRequest {
  int32 navigation_item_id = 1;
}
message CreateUserBookmarkResponse {
  UserBookmark bookmark = 1;
}

message DeleteUserBookmarkRequest {
  int32 bookmark_id = 1;
}
message DeleteUserBookmarkResponse {
  bool deleted = 1;
}

message UserBookmark {
  int32 id = 1;
  int32 user_id = 2;
  int32 navigation_item_id = 3;
  NavigationItem navigation_item = 4;
}

service SickRock {
  rpc Init(InitRequest) returns (InitResponse);
  rpc Ping(PingRequest) returns (PingResponse);

  // Authentication
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc ResetUserPassword(ResetUserPasswordRequest) returns (ResetUserPasswordResponse);

  // Device Code Authentication
  rpc GenerateDeviceCode(GenerateDeviceCodeRequest) returns (GenerateDeviceCodeResponse);
  rpc ClaimDeviceCode(ClaimDeviceCodeRequest) returns (ClaimDeviceCodeResponse);
  rpc CheckDeviceCode(CheckDeviceCodeRequest) returns (CheckDeviceCodeResponse);
  rpc GetDeviceCodeSession(GetDeviceCodeSessionRequest) returns (GetDeviceCodeSessionResponse);

  // Navigation for the UI
  rpc GetNavigationLinks(GetNavigationLinksRequest) returns (GetNavigationLinksResponse);

  // Table configurations available in the application
  rpc GetTableConfigurations(GetTableConfigurationsRequest) returns (GetTableConfigurationsResponse);

  // Navigation items from table_navigation
  rpc GetNavigation(GetNavigationRequest) returns (GetNavigationResponse);

  // Generic CRUD over items on a page
  rpc ListItems(ListItemsRequest) returns (ListItemsResponse);
  rpc CreateItem(CreateItemRequest) returns (CreateItemResponse);
  rpc GetItem(GetItemRequest) returns (GetItemResponse);
  rpc EditItem(EditItemRequest) returns (EditItemResponse);
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse);

  // Get structure/fields for a given page/table
  rpc GetTableStructure(GetTableStructureRequest) returns (GetTableStructureResponse);

  // Add a column to a table
  rpc AddTableColumn(AddTableColumnRequest) returns (GetTableStructureResponse);

  // Table Views
  rpc CreateTableView(CreateTableViewRequest) returns (CreateTableViewResponse);
  rpc UpdateTableView(UpdateTableViewRequest) returns (UpdateTableViewResponse);
  rpc GetTableViews(GetTableViewsRequest) returns (GetTableViewsResponse);
  rpc DeleteTableView(DeleteTableViewRequest) returns (DeleteTableViewResponse);

  // Foreign Key Management
  rpc CreateForeignKey(CreateForeignKeyRequest) returns (CreateForeignKeyResponse);
  rpc GetForeignKeys(GetForeignKeysRequest) returns (GetForeignKeysResponse);
  rpc DeleteForeignKey(DeleteForeignKeyRequest) returns (DeleteForeignKeyResponse);

  // Column Type Management
  rpc ChangeColumnType(ChangeColumnTypeRequest) returns (ChangeColumnTypeResponse);
  rpc DropColumn(DropColumnRequest) returns (DropColumnResponse);
  rpc ChangeColumnName(ChangeColumnNameRequest) returns (ChangeColumnNameResponse);

  // Recently Viewed Items
  rpc GetMostRecentlyViewed(GetMostRecentlyViewedRequest) returns (GetMostRecentlyViewedResponse);

  // Dashboards
  rpc GetDashboards(GetDashboardsRequest) returns (GetDashboardsResponse);

  // Dashboard Component Rules
  rpc GetDashboardComponentRules(GetDashboardComponentRulesRequest) returns (GetDashboardComponentRulesResponse);
  rpc CreateDashboardComponentRule(CreateDashboardComponentRuleRequest) returns (CreateDashboardComponentRuleResponse);

  // System Info
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);

  // User Bookmarks
  rpc GetUserBookmarks(GetUserBookmarksRequest) returns (GetUserBookmarksResponse);
  rpc CreateUserBookmark(CreateUserBookmarkRequest) returns (CreateUserBookmarkResponse);
  rpc DeleteUserBookmark(DeleteUserBookmarkRequest) returns (DeleteUserBookmarkResponse);
}
